digraph ForcedTransaction {
    rankdir=TB;
    node [shape=rectangle, style=filled];

    L1 [label="Ethereum (L1)", fillcolor="#ff4500", fontcolor="#ffffff"];
    L2 [label="Starknet (L2) Appchain", fillcolor="#1e90ff", fontcolor="#ffffff"];
    Sequencer [label="Sequencer", fillcolor="#ff69b4"];
    EscapeTool [label="Escape Tool\n(Madara & Stone)", fillcolor="#32cd32"];
    FirstTransactionQueue [label="First Transaction\nQueue Contract", fillcolor="#ff4500", fontcolor="#ffffff"];
    StarknetCore [label="Starknet Core\nContracts", fillcolor="#ff4500", fontcolor="#ffffff"];
    BalanceCalculator [label="Balance\nCalculator", fillcolor="#1e90ff", fontcolor="#ffffff"];
    Verifier [label="Verifier", fillcolor="#ff4500", fontcolor="#ffffff"];
    Bridge [label="Bridge", fillcolor="#ff4500", fontcolor="#ffffff"];

    User [shape=oval, fillcolor="#ffffff"];

    User -> FirstTransactionQueue [label="1. Request forced\ntransaction"];
    FirstTransactionQueue -> L2 [label="2. Submit request"];
    L2 -> Sequencer [label="3. Censor transaction\nafter time t"];
    Sequencer -> L2 [label="4. Freeze system\n(exit mode)"];

    User -> EscapeTool [label="5a. Synchronize\nlatest state"];
    EscapeTool -> BalanceCalculator [label="5b. Calculate\nuser balance"];
    EscapeTool -> EscapeTool [label="5c. Generate\nbalance proof"];
    EscapeTool -> Verifier [label="5d. Send proof\nfor registration"];

    User -> Bridge [label="6. Request fund\nwithdrawal"];
    Bridge -> StarknetCore [label="7a. Check frozen\nstate and proof"];
    Bridge -> Bridge [label="7b. Register request\nand prevent double-spend"];
    Bridge -> User [label="7c. Transfer\nfunds to user"];

    {rank=same; L1 L2}
    {rank=same; FirstTransactionQueue StarknetCore BalanceCalculator}
    {rank=same; Verifier Bridge}
}